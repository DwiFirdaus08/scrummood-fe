"""empty message

Revision ID: ccf66d9d9c31
Revises: 
Create Date: 2025-06-22 19:20:52.547100

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'ccf66d9d9c31'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=200), nullable=False),
    sa.Column('role', sa.Enum('MEMBER', 'FACILITATOR', 'MANAGER', name='userrole'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=True),
    sa.Column('emotion_tracking_enabled', sa.Boolean(), nullable=True),
    sa.Column('voice_analysis_enabled', sa.Boolean(), nullable=True),
    sa.Column('facial_analysis_enabled', sa.Boolean(), nullable=True),
    sa.Column('journal_analysis_enabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('username')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)

    op.create_table('teams',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('facilitator_id', sa.Integer(), nullable=False),
    sa.Column('scheduled_start', sa.DateTime(), nullable=False),
    sa.Column('scheduled_duration', sa.Integer(), nullable=True),
    sa.Column('actual_start', sa.DateTime(), nullable=True),
    sa.Column('actual_end', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('SCHEDULED', 'ACTIVE', 'COMPLETED', 'CANCELLED', name='sessionstatus'), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('agenda', sa.JSON(), nullable=True),
    sa.Column('emotion_tracking_enabled', sa.Boolean(), nullable=True),
    sa.Column('auto_suggestions_enabled', sa.Boolean(), nullable=True),
    sa.Column('recording_enabled', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['facilitator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_memberships',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.Enum('MEMBER', 'FACILITATOR', 'MANAGER', name='userrole'), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'team_id')
    )
    op.create_table('ai_suggestions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('suggestion_type', sa.Enum('BREAK', 'DISCUSSION', 'BREATHING', 'ENERGIZER', 'CHECK_IN', 'RESTRUCTURE', 'SUPPORT', name='suggestiontype'), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('trigger_emotions', sa.JSON(), nullable=True),
    sa.Column('trigger_threshold', sa.Float(), nullable=True),
    sa.Column('affected_users', sa.JSON(), nullable=True),
    sa.Column('suggested_duration', sa.Integer(), nullable=True),
    sa.Column('implementation_steps', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACCEPTED', 'DISMISSED', 'IMPLEMENTED', name='suggestionstatus'), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('responded_at', sa.DateTime(), nullable=True),
    sa.Column('responded_by', sa.Integer(), nullable=True),
    sa.Column('effectiveness_rating', sa.Integer(), nullable=True),
    sa.Column('feedback_notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['responded_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('ai_suggestions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_ai_suggestions_created_at'), ['created_at'], unique=False)

    op.create_table('chat_messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('message_type', sa.Enum('TEXT', 'EMOJI', 'SYSTEM', 'EMOTION_ALERT', name='messagetype'), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.Column('emotion_detected', sa.String(length=50), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('session_timestamp', sa.Integer(), nullable=True),
    sa.Column('is_edited', sa.Boolean(), nullable=True),
    sa.Column('edited_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['sender_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_chat_messages_timestamp'), ['timestamp'], unique=False)

    op.create_table('emotion_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('emotion_type', sa.Enum('HAPPY', 'SAD', 'ANGRY', 'FEAR', 'SURPRISE', 'DISGUST', 'NEUTRAL', 'STRESSED', 'EXCITED', 'CONFUSED', name='emotiontype'), nullable=False),
    sa.Column('intensity', sa.Float(), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('source', sa.Enum('TEXT', 'VOICE', 'FACIAL', 'MANUAL', name='analysissource'), nullable=False),
    sa.Column('raw_data', sa.JSON(), nullable=True),
    sa.Column('analysis_metadata', sa.JSON(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('session_timestamp', sa.Integer(), nullable=True),
    sa.Column('context', sa.String(length=500), nullable=True),
    sa.Column('is_processed', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('emotion_data', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_emotion_data_timestamp'), ['timestamp'], unique=False)

    op.create_table('journals',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('title', sa.String(length=200), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('reflection_prompts', sa.JSON(), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('emotion_analysis', sa.JSON(), nullable=True),
    sa.Column('keywords', sa.JSON(), nullable=True),
    sa.Column('analysis_completed', sa.Boolean(), nullable=True),
    sa.Column('is_private', sa.Boolean(), nullable=True),
    sa.Column('allow_ai_analysis', sa.Boolean(), nullable=True),
    sa.Column('share_insights', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reminders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('reminder_type', sa.Enum('SESSION_START', 'BREAK_TIME', 'CHECK_IN', 'FOLLOW_UP', 'ENERGIZER', name='remindertype'), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('scheduled_time', sa.DateTime(), nullable=False),
    sa.Column('sent_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('SCHEDULED', 'SENT', 'DISMISSED', 'CANCELLED', name='reminderstatus'), nullable=True),
    sa.Column('notify_email', sa.Boolean(), nullable=True),
    sa.Column('notify_push', sa.Boolean(), nullable=True),
    sa.Column('notify_in_app', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('metadata', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('reminders', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_reminders_scheduled_time'), ['scheduled_time'], unique=False)

    op.create_table('session_participants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('left_at', sa.DateTime(), nullable=True),
    sa.Column('is_present', sa.Boolean(), nullable=True),
    sa.Column('message_count', sa.Integer(), nullable=True),
    sa.Column('emotion_entries', sa.Integer(), nullable=True),
    sa.Column('participation_score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id', 'user_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('session_participants')
    with op.batch_alter_table('reminders', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_reminders_scheduled_time'))

    op.drop_table('reminders')
    op.drop_table('journals')
    with op.batch_alter_table('emotion_data', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_emotion_data_timestamp'))

    op.drop_table('emotion_data')
    with op.batch_alter_table('chat_messages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_chat_messages_timestamp'))

    op.drop_table('chat_messages')
    with op.batch_alter_table('ai_suggestions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_ai_suggestions_created_at'))

    op.drop_table('ai_suggestions')
    op.drop_table('team_memberships')
    op.drop_table('sessions')
    op.drop_table('teams')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_email'))

    op.drop_table('users')
    # ### end Alembic commands ###
